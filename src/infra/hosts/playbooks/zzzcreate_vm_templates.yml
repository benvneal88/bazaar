---
- name: Create cloud images
  # This needs to be a proxmox host, since some of the commands depend on `qm`.
  hosts: bazaar-1

  vars_files:
  - ../secrets.yml

  vars:
  - force_download: false
  # Path to public keys to load into the image.
  # - public_keys: '/root/.ssh/pve_template_keys/'
  - vm_public_key_file: "/root/.ssh/vm_key.pub"
  - node_target: "bazaar-1"
  - iso_name: "debian-12-genericcloud-arm64-20241110-1927.qcow2"
  - iso_source_url: "https://cdimage.debian.org/images/cloud/bookworm/20241110-1927/{{ iso_name }}"
  - iso_target_directory: "/media/pve_templates/"
  - iso_target_path:  "{{ iso_target_directory }}{{ iso_name }}"
  # A really, REALLY rudementary way to define multiple templates. We could probably do this later, but.  eh.
  - vm_defs:
      - id: 2000
        name: "debian12-cloudinit-template-"
        # nets:
        #   - id: 0
        #     bridge: "vmbr0"

  tasks:
    - name: Ensure iso directory exists
      ansible.builtin.file:
        path: "{{ iso_target_directory }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
    
    # - name: Ensure public keys directory exists
    #   ansible.builtin.file:
    #     path: "{{ public_keys }}"
    #     state: directory
    #     mode: '0755'
    #     owner: root
    #     group: root

    - name: Install Proxmoxer
      ansible.builtin.package:
        name:
          - python3-proxmoxer

    - name: Download cloud image to NFS storage
      ansible.builtin.get_url:
        url: "{{ iso_source_url }}"
        dest: "{{ iso_target_path }}"
        force: true
        mode: 0777
      when: force_download

    - name: Remove existing cloud image
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_secret }}"
        vmid: "{{ item.id }}"
        state: absent
      loop: "{{ vm_defs }}"

    - name: Create cloud-init VM template
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_secret }}"
        validate_certs: false
        node: "{{ node_target }}"
        name: "{{ item.name }}"
        description: "Cloud-Init template for VMs"
        vmid: "{{ item.id }}"
        state: present
        memory: 2048
        cores: 2
        sockets: 1
        machine: q35
        # disks:
        #   - storage: local-lvm
        #     type: scsi
        #     size: 10G
        #     format: qcow2
        net:
          net0: virtio,bridge=vmbr0
        bios: ovmf
        scsihw: virtio-scsi-pci
      loop: "{{ vm_defs }}"

    - name: Step 2
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_secret }}"
        validate_certs: false
        node: "{{ node_target }}"
        #state: template
        serial:
          serial0: socket
        vga: serial0
        boot: order=scsi0
        scsi:
          scsi0: local:0,import-from={{ iso_target_path }}
        ide:
          ide2: local:cloudinit,format=qcow2
        vmid: "{{ item.id }}"
      loop: "{{ vm_defs }}"

    # - name: Create new cloud images
    #   community.general.proxmox_kvm:
    #     api_host: "{{ proxmox_host }}"
    #     api_user: "{{ proxmox_api_user }}"
    #     api_token_id: "{{ proxmox_api_token_id }}"
    #     api_token_secret: "{{ proxmox_api_secret }}"
    #     validate_certs: false
    #     node: "{{ node_target }}"
    #     name: "{{ item.name }}"
    #     vmid: "{{ item.id }}"
    #     memory: 2048
    #     cores: 2
    #     sockets: 1
    #     net:
    #         id: 0
    #         bridge: vmbr0
    #         model: virtio
    #     disks:
    #       - id: 0
    #         type: scsi
    #         storage: local
    #         size: 10G
    #         file: "{{ iso_target_path }}"
    #     bootdisk: scsi0
    #     boot: cdn
    #     scsihw: "virtio-scsi-pci"
    #     #cipublickey: "{{ lookup('file', '{{ vm_public_key_file }}') }}"
    #     ciuser: "ansible"
    #     cipassword: "{{ proxmox_ci_password }}"
    #   loop: "{{ vm_defs }}"



    # - name: Assign network interfaces to image
    #   community.general.proxmox_nic:
    #     api_host: "{{ proxmox_host }}"
    #     api_user: "{{ api_user }}"
    #     api_token_id: "{{ api_token_id }}"
    #     api_token_secret: "{{ proxmox_api_secret }}"
    #     vmid: "{{ item.0.id }}"
    #     interface: "net{{ item.1.id }}"
    #     bridge: "vmbr0"
    #     tag: "{{ item.1.tag | default(0) }}"
    #   loop: "{{ vm_defs | subelements('nets') }}"

    #   # I can't get this to work. Import_from requires running as root, which I am..  but any other way the disk doesn't create.
    # # - name: Importing the cloud image disk
    # #   community.general.proxmox_disk:
    # #     api_host: "{{ api_host }}"
    # #     api_user: "{{ api_user }}"
    # #     api_token_id: "{{ api_token_id }}"
    # #     api_token_secret: "{{ proxmox_api_secret }}"
    # #     import_from: "{{ iso_target_path }}"
    # #     vmid: " {{ item.id }}"
    # #     storage: "{{ storage_target }}"
    # #     disk: "scsi0"
    # #     state: present
    # #     # size: 5
    # #     create: forced
    # #   loop: "{{ vm_defs }}"

    # - name: Import the cloned image disk
    #   ansible.builtin.shell:
    #     cmd: "qm importdisk {{ item.id }} {{ iso_target_path }} {{ storage_target }}"
    #   loop: "{{ vm_defs }}"

    #   # Again, not sure how to do this through a playbook task..
    #   # trying to attach the imported disk to the VM.
    # # - name: Set the disk image as disk 0
    # #   community.general.proxmox_disk:
    # #     api_host: "{{ api_host }}"
    # #     api_user: "{{ api_user }}"
    # #     api_token_id: "{{ api_token_id }}"
    # #     api_token_secret: "{{ proxmox_api_secret }}"
    # #     vmid: "{{ item.id }}"
    # #     state: present
    # #     disk: "unused0"
    # #   loop: "{{ vm_defs }}"

    # - name: Attach the cloned disk.
    #   ansible.builtin.shell:
    #     cmd: "qm set {{ item.id }} --scsi0 {{ storage_target }}:{{ item.id }}/vm-{{ item.id }}-disk-0.raw"
    #   loop: "{{ vm_defs }}"

    # - name: Add the CloudInit disk
    #   ansible.builtin.shell:
    #     cmd: "qm set {{ item.id }} --ide2 {{ storage_target }}:cloudinit"
    #   loop: "{{ vm_defs }}"

    # - name: Set the boot disk
    #   community.general.proxmox_kvm:
    #     api_host: "{{ api_host }}"
    #     api_user: "{{ api_user }}"
    #     api_token_id: "{{ api_token_id }}"
    #     api_token_secret: "{{ proxmox_api_secret }}"
    #     node: "{{ node_target }}"
    #     vmid: "{{ item.id }}"
    #     boot: "c"
    #     bootdisk: "scsi0"
    #     update: true
    #   loop: "{{ vm_defs }}"

    # - name: Pack up local public keys into one file
    #   delegate_to: localhost
    #   ansible.builtin.assemble:
    #     src: "{{ public_keys }}"
    #     dest: "/tmp/ssh_keys_file"
    #     mode: 0644

    # - name: Set SSH keys
    #   community.general.proxmox_kvm:
    #     api_host: "{{ api_host }}"
    #     api_user: "{{ api_user }}"
    #     api_token_id: "{{ api_token_id }}"
    #     api_token_secret: "{{ proxmox_api_secret }}"
    #     node: "{{ node_target }}"
    #     vmid: "{{ item.id }}"
    #     sshkeys: "{{ lookup('ansible.builtin.file', '/tmp/ssh_keys_file') }}"
    #     update: true
    #   loop: "{{ vm_defs }}"

    # - name: Convert to template
    #   ansible.builtin.shell:
    #     cmd: "qm template {{ item.id }}"
    #   loop: "{{ vm_defs }}"


    # # - name: debug test
    # #   ansible.builtin.debug:
    # #     msg: "{{ item.id }}"
    # #   loop: "{{ vm_defs }}"