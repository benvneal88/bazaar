- name: Clone VM from Cloud-Init Template
  hosts: bazaar-1
  become: true
  vars_files:
  - ../vars.secrets.yml
  - ../vars.commons.yml
  - ../vars.vms.yml


  tasks:
    # - name: Stop existing VMs
    #   community.general.proxmox_kvm:
    #     api_host: "{{ proxmox_host }}"
    #     api_user: "{{ proxmox_api_user }}"
    #     api_token_id: "{{ proxmox_api_token_id }}"
    #     api_token_secret: "{{ proxmox_api_secret }}"
    #     validate_certs: false
    #     node: "{{ item.node }}"
    #     vmid: "{{ item.vm_id }}"
    #     state: stopped
    #   loop: "{{ vm_definitions }}"
    
    - name: Remove existing VMs
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_secret }}"
        validate_certs: false
        node: "{{ item.node }}"
        vmid: "{{ item.vm_id }}"
        state: absent
      loop: "{{ vm_definitions }}"

    - name: Clone VM from cloud init templates
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_secret }}"
        validate_certs: false
        node: "{{ item.node }}"
        name: "{{ item.vm_name }}.{{ item.pool_id }}.bazaar.com"
        clone: "{{ item.template_name }}"
        newid: "{{ item.vm_id }}"
        pool: "{{ item.pool_id }}"
        full: true
        state: present
      register: clone_result
      loop: "{{ vm_definitions }}"

    - name: Set VM Resources
      ansible.builtin.shell: |
        qm set {{ item.vm_id }} --memory {{ item.memory  }} --cores {{ item.cores }}
      args:
        executable: /bin/bash
      loop: "{{ vm_definitions }}"

    # - name: Generate SHA-512 hashed password
    #   ansible.builtin.set_fact:
    #     encrypted_password: "{{ proxmox_ci_password | password_hash('sha512') }}"

    - name: Inject cloud-init user data for VM Instance
      ansible.builtin.template:
        src: "cloudinit/{{ user_data_file }}"
        remote_src: false
        dest: "{{ proxmox_storage_path }}/snippets/{{ item.pool_id }}-{{ item.vm_id }}-cloud-init-user-data.yaml"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ vm_definitions }}"
    
    - name: Attach user-data to VM
      ansible.builtin.shell: |
        qm set {{ item.vm_id }} --cicustom "user={{ proxmox_storage }}:snippets/{{ item.pool_id }}-{{ item.vm_id }}-cloud-init-user-data.yaml" --ipconfig0 ip={{ item.ip_address }}/24,gw={{ gateway_ip_address }}
      args:
        executable: /bin/bash
      register: attach_user_data
      changed_when: attach_user_data.rc == 0
      failed_when: attach_user_data.rc not in [0]
      loop: "{{ vm_definitions }}"

    - name: Regenerate cloudinit disk
      ansible.builtin.shell: |
        qm cloudinit update {{ item.vm_id }}
      args:
        executable: /bin/bash
      register: regenerate_cloud_init
      changed_when: regenerate_cloud_init.rc == 0
      failed_when: regenerate_cloud_init.rc not in [0]
      loop: "{{ vm_definitions }}"
