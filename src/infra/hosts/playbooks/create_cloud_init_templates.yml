- name: Create cloud images
  # This needs to be a proxmox host, since some of the commands depend on `qm`.
  hosts: bazaar-1

  vars_files:
  - ../secrets.yml

  vars:
  - force_download: false
  # Path to public keys to load into the image.
  # - public_keys: '/root/.ssh/pve_template_keys/'
  - vm_public_key_file: "/root/.ssh/vm_key.pub"
  - node_target: "bazaar-1"
  - proxmox_storage: "local"
  - cloud_image_name: "debian-12-genericcloud-arm64-20241110-1927.qcow2"
  - cloud_image_url: "https://cdimage.debian.org/images/cloud/bookworm/20241110-1927/{{ iso_name }}"
  - cloud_image_storage: "/media/pve_templates" 
  - vm_id: 1000
  - template_name: "debian-12.cloudinit-template"
  - cores: 2
  - memory: 2048
  - resize_disk: 15
  - QEMU_AGENT: true # Set this to false if you prefer not to use the QEMU agent.
  - UEFI: true # Set this to false if you would rather use a non-UEFI image.
  - user_data_file: "cloudinit-user-data.yml.j2"  # Make sure this file exists and contains your cloud-init user data.
  - user_data_file_storage: "local"  # The storage ID where the snippets will be stored; default is "local".
  - user_data_file_storage_path: "/var/lib/vz" # Default is "/var/lib/vz/snippets".
  - ciuser: "admin"

  
  tasks:
    - name: Generate SHA-512 hashed password
      ansible.builtin.set_fact:
        encrypted_password: "{{ proxmox_ci_password | password_hash('sha512') }}"

    # - name: Download the cloud image
    #   ansible.builtin.get_url:
    #     url: "{{ cloud_image_url }}"
    #     dest: "{{ cloud_image_storage }}/{{ cloud_image_name }}"
    #     owner: root
    #     group: root
    #     mode: '0644'
    #     timeout: 60

    - name: Remove existing cloud image
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_secret }}"
        vmid: "{{ vm_id }}"
        state: absent

    - name: Check if VM ID is in use
      ansible.builtin.shell: "qm status {{ vm_id }}"
      register: vm_status
      ignore_errors: true
      args:
        executable: /bin/bash
      changed_when: vm_status.rc == 0 or vm_status.rc == 1

    - name: Create VM for template
      ansible.builtin.shell: "qm create {{ vm_id }} --name {{ template_name }} --core {{ cores }} --memory {{ memory }} --net0 virtio,bridge=vmbr0"
      args:
        executable: /bin/bash
      when: vm_status.rc != 0
      register: create_vm
      changed_when: create_vm.rc == 0
      failed_when: create_vm.rc not in [0]

    - name: Import the disk to Proxmox
      ansible.builtin.shell: |
        qm importdisk {{ vm_id }} {{ cloud_image_storage }}/{{ cloud_image_name }} {{ proxmox_storage }} --format qcow2
      args:
        executable: /bin/bash
      when: vm_status.rc != 0
      register: import_disk
      changed_when: import_disk.rc == 0
      failed_when: import_disk.rc not in [0]

    - name: Attach the disk to the VM
      ansible.builtin.shell: |
        qm set {{ vm_id }} --scsihw virtio-scsi-pci --scsi0 {{ proxmox_storage }}:{{ vm_id }}/vm-{{ vm_id }}-disk-0.qcow2
      args:
        executable: /bin/bash
      when: vm_status.rc != 0
      register: attach_disk
      changed_when: attach_disk.rc == 0
      failed_when: attach_disk.rc not in [0]

    - name: Configure add Cloud-Init drive, set serial console, boot order, and network to dhcp
      ansible.builtin.shell: |
        qm set {{ vm_id }} --ide2 {{ proxmox_storage }}:cloudinit --boot order=scsi0 --serial0 socket --vga serial0 --citype nocloud --ipconfig0 ip=dhcp
      args:
        executable: /bin/bash
      when: vm_status.rc != 0
      register: cloud_init
      changed_when: cloud_init.rc == 0
      failed_when: cloud_init.rc not in [0]

    # - name: Copy ssh key to Proxmox node temporarily
    #   ansible.builtin.copy:
    #     dest: "{{ user_data_file_storage_path }}/snippets/{{ vm_id }}.pub"
    #     content: "{{ sshkey }}"
    #     remote_src: false
    #     owner: root
    #     group: root
    #     mode: '0644'
    #   when: vm_status.rc != 0  

    # - name: Delete temporarily copied ssh key
    #   ansible.builtin.file:
    #     path: "{{ user_data_file_storage_path }}/snippets/{{ vm_id }}.pub"
    #     state: absent
    #   when: vm_status.rc != 0

    - name: Enable QEMU Agent
      ansible.builtin.shell: |
        qm set {{ vm_id }} --agent 1
      args:
        executable: /bin/bash
      when: vm_status.rc != 0 and QEMU_AGENT
      register: enable_qemu_agent
      changed_when: enable_qemu_agent.rc == 0
      failed_when: enable_qemu_agent.rc not in [0]

    - name: Resize disk
      ansible.builtin.shell: |
        qm resize {{ vm_id }} scsi0 +{{ resize_disk }}G
      args:
        executable: /bin/bash
      when: vm_status.rc != 0
      register: resize_disk
      changed_when: resize_disk.rc == 0
      failed_when: resize_disk.rc not in [0]

    - name: Copy user-data to Proxmox node
      ansible.builtin.template:
        src: "{{ user_data_file }}"
        remote_src: false
        dest: "{{ user_data_file_storage_path }}/snippets/user-data.yaml"
        owner: root
        group: root
        mode: '0644'
      when: vm_status.rc != 0

    - name: Attach user-data to VM
      ansible.builtin.shell: |
        qm set {{ vm_id }} --cicustom "user={{ user_data_file_storage }}:snippets/user-data.yaml"
      args:
        executable: /bin/bash
      when: vm_status.rc != 0
      register: attach_user_data
      changed_when: attach_user_data.rc == 0
      failed_when: attach_user_data.rc not in [0]

    - name: Enable UEFI
      ansible.builtin.shell: |
        qm set {{ vm_id }} --bios ovmf --machine q35 --efidisk0 {{ proxmox_storage }}:0,format=raw
      args:
        executable: /bin/bash
      when: vm_status.rc != 0 and UEFI
      register: enable_uefi
      changed_when: enable_uefi.rc == 0
      failed_when: enable_uefi.rc not in [0]

    - name: Convert VM to template
      ansible.builtin.shell: |
        qm template {{ vm_id }}
      args:
        executable: /bin/bash
      when: vm_status.rc != 0
      register: convert_template
      changed_when: convert_template.rc == 0
      failed_when: convert_template.rc not in [0]